// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TalentSpot.Infrastructure.Data;

#nullable disable

namespace TalentSpot.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241011151110_ReIniateSeedDatas")]
    partial class ReIniateSeedDatas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TalentSpot.Domain.Entities.Benefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Benefits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f7ee1c3-c085-4816-8be8-2c4bb2ccb023"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1189),
                            Name = "Health Insurance",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1189)
                        },
                        new
                        {
                            Id = new Guid("356ad535-3c3c-4deb-8fd9-bfa2c7ce1a1f"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1191),
                            Name = "Paid Vacation",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1191)
                        },
                        new
                        {
                            Id = new Guid("d934d410-c4e0-4a4e-8dcf-dccbef64d539"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1192),
                            Name = "Remote Work",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1192)
                        },
                        new
                        {
                            Id = new Guid("9088898e-32bf-4acc-b482-3083ce52f58d"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1193),
                            Name = "Flexible Hours",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1194)
                        });
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AllowedJobPostings")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.ForbiddenWord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ForbiddenWords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3db62487-eb51-4adf-9768-7aa50afa8f07"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1206),
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1206),
                            Word = "Prohibited"
                        },
                        new
                        {
                            Id = new Guid("8236abee-82c4-499a-9abe-205c88425774"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1207),
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1208),
                            Word = "Illegal"
                        },
                        new
                        {
                            Id = new Guid("cb463d3f-235b-4613-93ac-58751d4c04d2"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1209),
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1209),
                            Word = "Banned"
                        },
                        new
                        {
                            Id = new Guid("a14ee31a-a2ae-4c49-9882-45943c1eb2d7"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1211),
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1212),
                            Word = "Restricted"
                        });
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QualityScore")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WorkTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.JobBenefit", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BenefitId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("JobId", "BenefitId");

                    b.HasIndex("BenefitId");

                    b.ToTable("JobBenefits");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8062f72-1951-423e-a619-2f3941be2f66"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1085),
                            Name = "Full-Time",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1085)
                        },
                        new
                        {
                            Id = new Guid("5cd362bc-a6d4-4f87-b267-3f12ca8d1e41"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1094),
                            Name = "Part-Time",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1094)
                        },
                        new
                        {
                            Id = new Guid("c9c2b820-d805-401e-a7ee-492fc84e3eed"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1117),
                            Name = "Freelance",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1117)
                        },
                        new
                        {
                            Id = new Guid("acfa3608-d91a-4aa1-82cc-ba7f5b962b84"),
                            CreatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1126),
                            Name = "Internship",
                            UpdatedDate = new DateTime(2024, 10, 11, 15, 11, 10, 129, DateTimeKind.Utc).AddTicks(1127)
                        });
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.Company", b =>
                {
                    b.HasOne("TalentSpot.Domain.Entities.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("TalentSpot.Domain.Entities.Company", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.Job", b =>
                {
                    b.HasOne("TalentSpot.Domain.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalentSpot.Domain.Entities.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.JobBenefit", b =>
                {
                    b.HasOne("TalentSpot.Domain.Entities.Benefit", "Benefit")
                        .WithMany()
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalentSpot.Domain.Entities.Job", "Job")
                        .WithMany("JobBenefits")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benefit");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.Job", b =>
                {
                    b.Navigation("JobBenefits");
                });

            modelBuilder.Entity("TalentSpot.Domain.Entities.User", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
